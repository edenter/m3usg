name: Update M3U Playlist

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on a schedule (every day at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

jobs:
  update-playlist:
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # updated M3U file.
      contents: write

    steps:
      # 1. Checks out your repository so the workflow can access it
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Sets up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Installs the script's dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 4. Runs your Python script
      - name: Run script to update M3U
        env:
          M3U_URL: ${{ vars.M3U_URL }}
        run: python main.py

      # 5. Check for changes using hash from latest release description
      - name: Check for changes
        id: check_changes
        env:
          # The GITHUB_TOKEN is required for the GitHub CLI to interact with your repo
          GH_TOKEN: ${{ github.token }}
        run: |
          # Calculate hash of the new playlist
          NEW_HASH=$(sha256sum updated_playlist.m3u | awk '{print $1}')
          echo "New hash: $NEW_HASH"

          # Get the body of the latest release and extract the old hash.
          # The body is expected to contain a line like: **Playlist Hash (SHA256):** `the_hash`
          # We suppress errors in case no release exists yet and get the hash from the "New Playlist Hash" line.
          LATEST_RELEASE_BODY=$(gh release view --json body --jq .body 2>/dev/null || echo "")
          OLD_HASH=$(echo "$LATEST_RELEASE_BODY" | grep -A 1 "New Playlist Hash" | tail -n 1 | tr -d '`\r\n')
          echo "Old hash: $OLD_HASH"

          if [ "$NEW_HASH" = "$OLD_HASH" ]; then
            echo "No changes detected. Skipping release."
            echo "has_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Playlist has changed. Preparing for new release."
            echo "has_changed=true" >> $GITHUB_OUTPUT
            echo "file_hash=$NEW_HASH" >> $GITHUB_OUTPUT
            echo "previous_file_hash=$OLD_HASH" >> $GITHUB_OUTPUT
          fi

      # 6. Get current date for tag
      - name: Get current date
        if: steps.check_changes.outputs.has_changed == 'true'
        id: date
        run: echo "today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # 7. Create a new release and upload the playlist as an asset
      - name: Create Release and Upload Asset
        if: steps.check_changes.outputs.has_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          # The name of the tag to create. Using the date ensures it's unique.
          tag_name: playlist-${{ github.run_number }}-${{ steps.date.outputs.today }}
          # The files to upload as release assets.
          files: updated_playlist.m3u
          # This marks the release as the "latest" release.
          make_latest: true
          # Add the hash to the release notes for easy viewing.
          body: |
            **New Playlist Hash (SHA256):**
            `${{ steps.check_changes.outputs.file_hash }}`

            **Previous Playlist Hash (SHA256):**
            `${{ steps.check_changes.outputs.previous_file_hash }}`
